# Skill Circuits

image: gitlab.ewi.tudelft.nl:4242/skill-circuits/docker-image:master


variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  GRADLE_USER_HOME: ".gradle"
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.caching=true"
  SAST_JAVA_VERSION: 17


# The names of the stages we use
stages:
  - build 1
  - build 2
  - test
  - review
  - accessibility
  - gitlab reports
  - publish
  - deploy


# Default build cache settings to extend from
.build_cached:
  cache:
    key: "gradle-build"
    paths:
      - .gradle/
    policy: pull
  rules:
    - if: $CI_COMMIT_BRANCH == "master" ||
        $CI_COMMIT_BRANCH == "development" ||
        $CI_MERGE_REQUEST_ID ||
        $CI_PIPELINE_SOURCE == "push"


# Setting globally that gitlab reports need gradle_build job
.gitlab_reporter:
  stage: gitlab reports
  needs:
    - gradle_build


# Runs gradle build without tests or checks
gradle_build:
  extends: .build_cached
  cache:
    policy: pull-push
  stage: build 1
  artifacts:
    name: build
    expire_in: 6 hours
    paths:
      - build/
  script:
    - gradle --build-cache build testClasses -x test -x licenseMain -x licenseTest -x spotlessJava -x spotlessCheck


# Generate the pom for dependency scanning
generate_pom:
  extends: .build_cached
  stage: build 2
  needs:
    - gradle_build
  rules:
    - if: $CI_COMMIT_BRANCH == "master" ||
        $CI_COMMIT_BRANCH == "development" ||
        $CI_MERGE_REQUEST_ID
  artifacts:
    name: pom
    expire_in: 6 hours
    paths:
      - pom.xml
  script:
    - gradle generatePomFileForGeneratePomPublication
  after_script:
    - cp build/publications/generatePom/pom-default.xml pom.xml


# Run tests
gradle_test:
  extends: .build_cached
  stage: test
  needs:
    - gradle_build
  coverage: '/Code coverage: \d+\.\d+/'
  artifacts:
     name: Coverage report
     expire_in: 6 hours
     paths:
       - codecov/
     reports:
       junit: build/test-results/test/TEST-*.xml
       cobertura: build/reports/jacoco/test/jacocoTestReport.xml
  script:
    - gradle --build-cache test
  after_script:
     # Rerun with none of the dependent tasks to ensure creation of the report
     # without having to recheck whether the code has compiled (it has in build cache).
     - gradle jacocoTestReport -x processResources -x compileJava -x classes --rerun-tasks

     # Print out the coverage percentage from the test report.
     - awk -F"," '{ instructions += $4 + $5; covered += $5 } END { print covered, "/", instructions, " instructions covered"; print "Code coverage:", 100*covered/       instructions }' build/reports/jacoco/test/jacocoTestReport.csv || true
     - cp -r build/reports codecov


# Run spotless
gradle_spotless:
  extends: .build_cached
  stage: review
  needs:
    - gradle_build
  artifacts:
    name: spotless
    expose_as: Spotless Diagnosis
    expire_in: 7 days
    paths:
      - spotless-diagnose-java/
  script:
    - gradle --build-cache spotlessCheck
  after_script:
    - cp -r build/spotless-diagnose-java spotless-diagnose-java/


# Run license check
gradle_licenses:
  extends: .build_cached
  stage: review
  needs:
    - gradle_build
  script:
    - gradle --build-cache licenseMain
    - gradle --build-cache licenseTest


# Publish jacoco test report
publish_jacoco_report:
  extends: .build_cached
  stage: publish
  needs:
    - gradle_test
  coverage: '/Code coverage: \d+\.\d+/'
  artifacts:
    name: codecov
    expose_as: Code coverage report
    expire_in: 7 days
    paths:
      - codecov/
  script:
    # Rerun with none of the dependent tasks to ensure creation of the report
    # without having to recheck whether the code has compiled (it has in build cache).
    - gradle jacocoTestReport -x processResources -x compileJava -x classes --rerun-tasks
  after_script:
    # Print out the coverage percentage from the test report.
    - awk -F"," '{ instructions += $4 + $5; covered += $5 } END { print covered, "/", instructions, " instructions covered"; print "Code coverage:", 100*covered/instructions }' build/reports/jacoco/test/jacocoTestReport.csv
    - cp -r build/reports codecov


# Publish the JAR for Skill Circuits
publish_jar:
  extends: .build_cached
  stage: publish
  rules:
     - if: $CI_COMMIT_BRANCH == "master" ||
         $CI_COMMIT_BRANCH == "development" ||
         $CI_MERGE_REQUEST_ID ||
         $CI_PIPELINE_SOURCE == "push" ||
         $CI_PIPELINE_SOURCE == "trigger"
  artifacts:
    name: skill_circuits
    expose_as: Skill Circuits JAR
    expire_in: 7 days
    paths:
      - skill_circuits.jar
  script:
    - cp build/libs/*.jar ./skill_circuits.jar


# Include templates for security scans and code quality reports
include:
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: Jobs/Code-Quality.gitlab-ci.yml
  - template: Security/DAST.gitlab-ci.yml
#  - template: Security/SAST.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Verify/Accessibility.gitlab-ci.yml
    #  - template: Verify/Browser-Performance.gitlab-ci.yml


# Runs the code quality reporter
code_quality:
  extends:
    - .gitlab_reporter
  stage: gitlab reports
  rules:
    - if: $CI_COMMIT_BRANCH == "master" ||
        $CI_COMMIT_BRANCH == "development" ||
        $CI_MERGE_REQUEST_ID

# Runs the SAST reporter manually
# (there was a problem with running this from the template with Java 11,
#  even though it should have been configured)
#sast:
#  extends:
#    - .build_cached
#    - .gitlab_reporter
#  stage: gitlab reports
#  rules:
#    - if: $CI_COMMIT_BRANCH == "master" ||
#        $CI_COMMIT_BRANCH == "development" ||
#        $CI_MERGE_REQUEST_ID
#      when: manual
#  allow_failure: true


# Run the DAST security checks and reporter.
# Currently set to manual as it requires a test environment to be up and running.
dast:
  extends:
    - .build_cached
    - .gitlab_reporter
  stage: gitlab reports
  rules:
    - if: $CI_COMMIT_BRANCH == "master" ||
        $CI_COMMIT_BRANCH == "development" ||
        $CI_MERGE_REQUEST_ID
      when: manual
  variables:
    DAST_VERSION: latest

# TODO CONFIGURE
# Accessibility testing
#a11y:
#  extends:
#    - .gitlab_reporter
#  rules:
#    - if: $CI_PIPELINE_SOURCE == "trigger" ||
#        $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
#      when: never
#    - if: $CI_COMMIT_BRANCH == "master" ||
#        $CI_COMMIT_BRANCH == "development"
#      when: manual
#  stage: gitlab reports
#  variables:
#    ally_urls: "https://skills.ewi.tudelft.nl"

# Dependency scanning reporter for checking dependencies of Queue.
#dependency_scanning:
#  extends:
#    - .build_cached
#    - .gitlab_reporter
#  stage: gitlab reports
#  rules:
#    - if: $CI_COMMIT_BRANCH == "master" ||
#        $CI_COMMIT_BRANCH == "development" ||
#        $CI_MERGE_REQUEST_ID
#  needs:
#    - generate_pom
#  dependencies:
#    - generate_pom
#  before_script:
#    - rm build.gradle* gradlew gradlew.bat
#    - cat pom.xml
#  variables:
#    MAVEN_CLI_OPTS: -q -Dmaven.main.skip -Dmaven.test.skip -DskipTests --batch-mode


# License scanning reporter for checking the licenses of dependencies.
license_scanning:
  extends:
    - .build_cached
    - .gitlab_reporter
  stage: gitlab reports
  rules:
    - if: $CI_COMMIT_BRANCH == "master" ||
        $CI_COMMIT_BRANCH == "development" ||
        $CI_MERGE_REQUEST_ID
  needs:
    - generate_pom
  dependencies:
    - generate_pom
  before_script:
    - rm build.gradle* gradlew gradlew.bat
    - cat pom.xml
  variables:
    MAVEN_CLI_OPTS: -q -Dmaven.main.skip -Dmaven.test.skip -DskipTests --batch-mode
    LM_JAVA_VERSION: 17

dev-deploy:
  image: getsentry/sentry-cli
  stage: deploy
  dependencies:
    - publish_jar
  before_script:
    - 'which ssh-agent || ( apk add --update openssh-client )'
    - eval $(ssh-agent -s)
    ##
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    ##
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan skills-dev.ewi.tudelft.nl >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp skill_circuits.jar deploy@skills-dev.ewi.tudelft.nl:/var/www/skills/skills.jar
    - ssh deploy@skills-dev.ewi.tudelft.nl sudo /bin/systemctl restart skills
  environment:
    name: test
    url: https://skills-dev.tudelft.nl
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger" ||
        $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
      when: never
    - if: $CI_COMMIT_BRANCH == "development" && $CI_PROJECT_NAMESPACE == "skill-circuits"
      when: on_success

# TODO CONFIGURE
deploy:
  image: getsentry/sentry-cli
  stage: deploy
  dependencies:
    - publish_jar
  before_script:
    - 'which ssh-agent || ( apk add --update openssh-client )'
    - eval $(ssh-agent -s)
    ##
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    ##
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan skills.ewi.tudelft.nl >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - start=$(date +%s)
#    - export SENTRY_URL=$SENTRY_URL
#    - export SENTRY_ORG=$SENTRY_GIT_ORG
#    - export SENTRY_AUTH_TOKEN=$SENTRY_GIT_AUTH_TOKEN
#    - export SENTRY_PROJECT=$SENTRY_GIT_PROJECT
#    - export SENTRY_RELEASE_VERSION=`sentry-cli releases propose-version`
#    - echo "proposed version is $SENTRY_RELEASE_VERSION"
#    - sentry-cli releases set-commits $SENTRY_RELEASE_VERSION --auto
#    - sentry-cli releases new $SENTRY_RELEASE_VERSION
    - scp skill_circuits.jar deploy@skills.ewi.tudelft.nl:/var/www/skills/skills.jar
    - ssh deploy@skills.ewi.tudelft.nl sudo /bin/systemctl restart skills
#    - sentry-cli releases finalize $SENTRY_RELEASE_VERSION
    - now=$(date +%s)
#    - sentry-cli releases deploys $SENTRY_RELEASE_VERSION new -e production -t $((now-start))
  environment:
    name: production
    url: https://skills.ewi.tudelft.nl
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger" ||
        $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
      when: never
    - if: $CI_COMMIT_BRANCH == "master" && $CI_PROJECT_NAMESPACE == "skill-circuits"
      when: on_success

